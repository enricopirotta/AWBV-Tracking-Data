)
newmap <- getMap(resolution = "low")
plot(newmap,
xlim = c(30, 33),
ylim = c(-29, -21),
asp = 1
)
newmap <- getMap(resolution = "low")
plot(newmap,
xlim = c(30, 33),
ylim = c(-34, -21),
asp = 1
)
newmap <- getMap(resolution = "low")
plot(newmap,
xlim = c(30, 33),
ylim = c(-35, -21),
asp = 1
)
newmap <- getMap(resolution = "low")
plot(newmap,
xlim = c(30, 32),
ylim = c(-35, -21),
asp = 1
)
newmap <- getMap(resolution = "low")
plot(newmap,
xlim = c(30, 31),
ylim = c(-35, -21),
asp = 1
)
newmap <- getMap(resolution = "low")
plot(newmap,
xlim = c(30, 30.5),
ylim = c(-35, -21),
asp = 1
)
newmap <- getMap(resolution = "low")
plot(newmap,
xlim = c(28, 30.5),
ylim = c(-35, -21),
asp = 1
)
newmap <- getMap(resolution = "low")
plot(newmap,
xlim = c(27, 31),
ylim = c(-35, -21),
asp = 1
)
plot(data$lon,data$lat)
newmap <- getMap(resolution = "low")
plot(newmap,
xlim = c(27, 31),
ylim = c(-35, -21),
asp = 1
)
points(data$lon,data$lat)
newmap <- getMap(resolution = "high")
plot(newmap,
xlim = c(27, 31),
ylim = c(-35, -21),
asp = 1)
points(data$lon,data$lat)
newmap <- getMap(resolution = "medium")
plot(newmap,
xlim = c(27, 31),
ylim = c(-35, -21),
asp = 1)
newmap <- getMap(resolution = "low")
plot(newmap,
xlim = c(27, 31),
ylim = c(-35, -21),
asp = 1)
newmap <- getMap(resolution = "low")
plot(newmap,
xlim = c(29, 31),
ylim = c(-35, -21),
asp = 1)
points(data$lon,data$lat)
newmap <- getMap(resolution = "low")
plot(newmap,
xlim = c(29, 31),
ylim = c(-33, -30),
asp = 1)
points(data$lon,data$lat)
newmap <- getMap(resolution = "low")
plot(newmap,
xlim = c(29, 31),
ylim = c(-33, -29),
asp = 1)
points(data$lon,data$lat)
newmap <- getMap(resolution = "low")
plot(newmap,
xlim = c(28, 31),
ylim = c(-33, -29),
asp = 1)
points(data$lon,data$lat)
newmap <- getMap(resolution = "low")
plot(newmap,
xlim = c(28, 32),
ylim = c(-33, -29),
asp = 1)
points(data$lon,data$lat)
newmap <- getMap(resolution = "low")
plot(newmap,
xlim = c(28, 32),
ylim = c(-33, -27),
asp = 1)
points(data$lon,data$lat)
newmap <- getMap(resolution = "low")
plot(newmap,
xlim = c(28, 32),
ylim = c(-33, -25),
asp = 1)
points(data$lon,data$lat)
points(data$lon,data$lat, pch = 1)
points(data$lon,data$lat, cex = .6)
newmap <- getMap(resolution = "low")
plot(newmap,
xlim = c(28, 32),
ylim = c(-33, -25),
asp = 1)
points(data$lon,data$lat, cex = .6)
newmap <- getMap(resolution = "low")
plot(newmap,
xlim = c(28, 32),
ylim = c(-33, -25),
asp = 1)
points(data$lon,data$lat, cex = .6)
date1 <- strptime("2015-04-08","%Y-%m-%d")
data<-subset(data, data$DateTime  > date1)
levels(data$altitude)
levels(data$Altitude_m)
data<-subset(data, data$Altitude_m  !="NegAlt" )
levels(data$Altitude_m)
data<-subset(data, data$Altitude_m  !=NegAlt )
data<-subset(data, data$Altitude_m  !="NegAlt" & != "No Fix")
data<-subset(data, data$Altitude_m  !="NegAlt" & data$Altitude_m != "No Fix")
rm(list=ls())
setwd("C:/Users/akane/Desktop/Science/Manuscripts/White-backed Vulture Tracking Data/AWBV-Tracking-Data/Data")
data<-read.csv("475June.csv", header=T, sep=",")
head(data)
class(data$DateTime)
##################################################################################
## make the date column into a date-time class object
##################################################################################
data$DateTime<-as.POSIXct(data$DateTime, format= "%d-%m-%y %H:%M", tz="UTC")
data$DateTime
length(data$DateTime)
##################################################################################
## rename columns
##################################################################################
names(data)[names(data) == 'Longitude_E'] <- 'lon'
names(data)[names(data) == 'Latitude_N'] <- 'lat'
names(data)
names(data)[names(data) == 'Altitude_m'] <- 'alt'
names(data)
length(data$DateTime)
newmap <- getMap(resolution = "low")
plot(newmap,
xlim = c(28, 32),
ylim = c(-30, -25),
asp = 1)
points(data$lon,data$lat, cex = .6)
data<-subset(data, data$DateTime  > date1 & data$Altitude_m  !="NegAlt" & data$Altitude_m != "No Fix")
date1 <- strptime("2015-04-08","%Y-%m-%d")
data<-subset(data, data$DateTime  > date1 & data$Altitude_m  !="NegAlt" & data$Altitude_m != "No Fix")
length(data$DateTime)
data$DateTime
data<-read.csv("475June.csv", header=T, sep=",")
head(data)
class(data$DateTime)
##################################################################################
## make the date column into a date-time class object
##################################################################################
data$DateTime<-as.POSIXct(data$DateTime, format= "%d-%m-%y %H:%M", tz="UTC")
data$DateTime
length(data$DateTime)
##################################################################################
## rename columns
##################################################################################
names(data)[names(data) == 'Longitude_E'] <- 'lon'
names(data)[names(data) == 'Latitude_N'] <- 'lat'
names(data)[names(data) == 'Altitude_m'] <- 'alt'
names(data)
##################################################################################
## can identify outliers by plotting the data
##################################################################################
newmap <- getMap(resolution = "low")
xlim = c(28, 32),
plot(newmap,
ylim = c(-30, -25),
asp = 1)
points(data$lon,data$lat, cex = .6)
newmap <- getMap(resolution = "low")
plot(newmap,
xlim = c(28, 32),
ylim = c(-30, -25),
asp = 1)
points(data$lon,data$lat, cex = .6)
date1 <- strptime("2015-04-08","%Y-%m-%d")
data$alt
data<-subset(data, data$DateTime  > date1 & data$alt  !="NegAlt" & data$alt != "No Fix")
## can identify outliers by plotting the data
length(data$DateTime)
newmap <- getMap(resolution = "low")
plot(newmap,
xlim = c(28, 32),
ylim = c(-30, -25),
asp = 1)
points(data$lon,data$lat, cex = .6)
rm(list=ls())
setwd("C:/Users/akane/Desktop/Science/Manuscripts/White-backed Vulture Tracking Data/AWBV-Tracking-Data/Data")
data<-read.csv("475June.csv", header=T, sep=",")
head(data)
class(data$DateTime)
##################################################################################
## make the date column into a date-time class object
##################################################################################
data$DateTime<-as.POSIXct(data$DateTime, format= "%d-%m-%y %H:%M", tz="UTC")
data$DateTime
length(data$DateTime)
##################################################################################
## rename columns
##################################################################################
names(data)[names(data) == 'Longitude_E'] <- 'lon'
names(data)[names(data) == 'Latitude_N'] <- 'lat'
names(data)[names(data) == 'Altitude_m'] <- 'alt'
names(data)
##################################################################################
## can identify outliers by plotting the data
##################################################################################
newmap <- getMap(resolution = "low")
plot(newmap,
xlim = c(28, 32),
ylim = c(-30, -25),
asp = 1)
points(data$lon,data$lat, cex = .6)
##################################################################################
## clean the data
##################################################################################
date1 <- strptime("2015-04-08","%Y-%m-%d")
data<-subset(data, data$DateTime  > date1
& data$alt  !="NegAlt" & data$alt != "No Fix"
& data$lon < 32.5 & data$lon > 31.4
&  data$lat > -28 & data$lat < -25)
newmap <- getMap(resolution = "low")
plot(newmap,
xlim = c(28, 32),
ylim = c(-30, -25),
asp = 1)
points(data$lon,data$lat, cex = .6)
rm(list=ls())
setwd("C:/Users/akane/Desktop/Science/Manuscripts/White-backed Vulture Tracking Data/AWBV-Tracking-Data/Data")
head(data)
data<-read.csv("475June.csv", header=T, sep=",")
class(data$DateTime)
##################################################################################
## make the date column into a date-time class object
##################################################################################
data$DateTime<-as.POSIXct(data$DateTime, format= "%d-%m-%y %H:%M", tz="UTC")
data$DateTime
length(data$DateTime)
##################################################################################
## rename columns
names(data)[names(data) == 'Latitude_N'] <- 'lat'
names(data)[names(data) == 'Longitude_E'] <- 'lon'
##################################################################################
names(data)[names(data) == 'Altitude_m'] <- 'alt'
names(data)
##################################################################################
## can identify outliers by plotting the data
##################################################################################
newmap <- getMap(resolution = "low")
plot(newmap,
xlim = c(28, 32),
ylim = c(-30, -25),
asp = 1)
points(data$lon,data$lat, cex = .6)
date1 <- strptime("2015-04-08","%Y-%m-%d")
data<-subset(data, data$DateTime  > date1
& data$alt  !="NegAlt" & data$alt != "No Fix"
& data$lon < 32.5 & data$lon > 31.4
&  data$lat > -29 & data$lat < -25)
newmap <- getMap(resolution = "low")
plot(newmap,
xlim = c(28, 32),
ylim = c(-30, -25),
asp = 1)
points(data$lon,data$lat, cex = .6)
rm(list=ls())
library("plotKML")
library("chron")
library("sp")
library(OpenStreetMap)
library(rgdal)
library(move)
library(rworldmap)
## https://pakillo.github.io/R-GIS-tutorial/
##################################################################################
setwd("C:/Users/akane/Desktop/Science/Manuscripts/White-backed Vulture Tracking Data/AWBV-Tracking-Data/Data")
data<-read.csv("475June.csv", header=T, sep=",")
head(data)
class(data$DateTime)
##################################################################################
## make the date column into a date-time class object
##################################################################################
data$DateTime<-as.POSIXct(data$DateTime, format= "%d-%m-%y %H:%M", tz="UTC")
data$DateTime
length(data$DateTime)
##################################################################################
## rename columns
##################################################################################
names(data)[names(data) == 'Longitude_E'] <- 'lon'
names(data)[names(data) == 'Latitude_N'] <- 'lat'
names(data)[names(data) == 'Altitude_m'] <- 'alt'
names(data)
##################################################################################
## can identify outliers by plotting the data
##################################################################################
newmap <- getMap(resolution = "low")
plot(newmap,
xlim = c(28, 32),
ylim = c(-30, -25),
asp = 1)
points(data$lon,data$lat, cex = .6)
##################################################################################
## clean the data
##################################################################################
date1 <- strptime("2015-04-08","%Y-%m-%d")
data<-subset(data, data$DateTime  > date1
& data$alt  !="NegAlt" & data$alt != "No Fix"
& data$lon > 31 & data$lon < 32.5
&  data$lat > -29 & data$lat < -25)
newmap <- getMap(resolution = "low")
plot(newmap,
xlim = c(28, 32),
ylim = c(-30, -25),
asp = 1)
points(data$lon,data$lat, cex = .6)
##################################################################################
## African White-backed Vulture Tracking Data
##################################################################################
rm(list=ls())
library("plotKML")
library("chron")
library("sp")
library(OpenStreetMap)
library(rgdal)
library(move)
library(rworldmap)
## https://pakillo.github.io/R-GIS-tutorial/
##################################################################################
setwd("C:/Users/akane/Desktop/Science/Manuscripts/White-backed Vulture Tracking Data/AWBV-Tracking-Data/Data")
data<-read.csv("475June.csv", header=T, sep=",")
head(data)
class(data$DateTime)
##################################################################################
## make the date column into a date-time class object
##################################################################################
data$DateTime<-as.POSIXct(data$DateTime, format= "%d-%m-%y %H:%M", tz="UTC")
data$DateTime
length(data$DateTime)
##################################################################################
## rename columns
##################################################################################
names(data)[names(data) == 'Longitude_E'] <- 'lon'
names(data)[names(data) == 'Latitude_N'] <- 'lat'
names(data)[names(data) == 'Altitude_m'] <- 'alt'
names(data)
##################################################################################
## can identify outliers by plotting the data
##################################################################################
newmap <- getMap(resolution = "low")
plot(newmap,
xlim = c(28, 32),
ylim = c(-30, -25),
asp = 1)
points(data$lon,data$lat, cex = .6)
##################################################################################
## clean the data
##################################################################################
date1 <- strptime("2015-04-08","%Y-%m-%d")
data<-subset(data, data$DateTime  > date1
& data$alt  !="NegAlt" & data$alt != "No Fix"
& data$lon > 30 & data$lon < 32.5
&  data$lat > -29 & data$lat < -25)
newmap <- getMap(resolution = "low")
plot(newmap,
xlim = c(28, 32),
ylim = c(-30, -25),
asp = 1)
points(data$lon,data$lat, cex = .6)
##################################################################################
## African White-backed Vulture Tracking Data
##################################################################################
rm(list=ls())
library("plotKML")
library("chron")
library("sp")
library(OpenStreetMap)
library(rgdal)
library(move)
library(rworldmap)
## https://pakillo.github.io/R-GIS-tutorial/
##################################################################################
setwd("C:/Users/akane/Desktop/Science/Manuscripts/White-backed Vulture Tracking Data/AWBV-Tracking-Data/Data")
data<-read.csv("475June.csv", header=T, sep=",")
head(data)
class(data$DateTime)
##################################################################################
## make the date column into a date-time class object
##################################################################################
data$DateTime<-as.POSIXct(data$DateTime, format= "%d-%m-%y %H:%M", tz="UTC")
data$DateTime
length(data$DateTime)
##################################################################################
## rename columns
##################################################################################
names(data)[names(data) == 'Longitude_E'] <- 'lon'
names(data)[names(data) == 'Latitude_N'] <- 'lat'
names(data)[names(data) == 'Altitude_m'] <- 'alt'
names(data)
##################################################################################
## can identify outliers by plotting the data
##################################################################################
newmap <- getMap(resolution = "low")
plot(newmap,
xlim = c(28, 32),
ylim = c(-30, -25),
asp = 1)
points(data$lon,data$lat, cex = .6)
##################################################################################
## clean the data
##################################################################################
date1 <- strptime("2015-04-08","%Y-%m-%d")
data<-subset(data, data$DateTime  > date1
& data$alt  !="NegAlt" & data$alt != "No Fix"
& data$lon > 29.5 & data$lon < 32.5
&  data$lat > -29 & data$lat < -25)
#data<-subset(data, data$lon < 32.5 & data$lon > 31.4)
#data<-subset(data, data$lat > -28 & data$lat < -25 )
newmap <- getMap(resolution = "low")
plot(newmap,
xlim = c(28, 32),
ylim = c(-30, -25),
asp = 1)
points(data$lon,data$lat, cex = .6)
length(data$DateTime)
min(data$lon)
max(data$lon)
min(data$lat)
max(data$lat)
rm(list=ls())
library("plotKML")
library("chron")
library("sp")
library(OpenStreetMap)
library(rgdal)
library(move)
library(rworldmap)
## https://pakillo.github.io/R-GIS-tutorial/
##################################################################################
setwd("C:/Users/akane/Desktop/Science/Manuscripts/White-backed Vulture Tracking Data/AWBV-Tracking-Data/Data")
data<-read.csv("475June.csv", header=T, sep=",")
head(data)
class(data$DateTime)
##################################################################################
## make the date column into a date-time class object
##################################################################################
data$DateTime<-as.POSIXct(data$DateTime, format= "%d-%m-%y %H:%M", tz="UTC")
data$DateTime
length(data$DateTime)
##################################################################################
## rename columns
##################################################################################
names(data)[names(data) == 'Longitude_E'] <- 'lon'
names(data)[names(data) == 'Latitude_N'] <- 'lat'
names(data)[names(data) == 'Altitude_m'] <- 'alt'
names(data)
##################################################################################
## can identify outliers by plotting the data
##################################################################################
newmap <- getMap(resolution = "low")
plot(newmap,
xlim = c(28, 32),
ylim = c(-30, -25),
asp = 1)
points(data$lon,data$lat, cex = .6)
##################################################################################
## clean the data
##################################################################################
date1 <- strptime("2015-04-08","%Y-%m-%d")
data<-subset(data, data$DateTime  > date1
& data$alt  !="NegAlt" & data$alt != "No Fix"
& data$lon > 29.5 & data$lon < 32.5
&  data$lat > -29 & data$lat < -25)
## these coords should be checked before removal!
##################################################################################
## check cleaned data and plot again
##################################################################################
length(data$DateTime)
min(data$lon)
max(data$lon)
min(data$lat)
max(data$lat)
newmap <- getMap(resolution = "low")
plot(newmap,
xlim = c(28, 32),
ylim = c(-30, -25),
asp = 1)
points(data$lon,data$lat, cex = .6)
